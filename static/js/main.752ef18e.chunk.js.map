{"version":3,"sources":["App.js","index.js"],"names":["App","useState","search","setSearch","wordList","setWordList","savedWords","setSavedWords","finalArray","groupedList","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","Array","from","keys","sort","key","groupBy","Object","values","i","map","rhymes","className","word","type","onClick","console","log","upperDiv","length","onChange","e","target","value","placeholder","axios","then","response","data","catch","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAMe,SAASA,IAAO,IAAD,EACAC,mBAAS,IADT,mBACrBC,EADqB,KACbC,EADa,OAEIF,mBAAS,IAFb,mBAErBG,EAFqB,KAEXC,EAFW,OAIQJ,mBAAS,IAJjB,mBAIrBK,EAJqB,KAITC,EAJS,KAgBtBC,EAAa,GAGbC,EAyDR,SAAiBC,EAASC,GAGxB,GAAwB,oBAAbA,EAAyB,CAClC,IAAMC,EAAWD,EACjBA,EAAW,SAACE,GAAD,OAASA,EAAID,IAG1B,IARkC,EAQ5BE,EAAiB,IAAIC,IARO,cASbL,GATa,IASlC,2BAA8B,CAAC,IAApBM,EAAmB,QACtBC,EAAYN,EAASK,GAEtBF,EAAeI,IAAID,IACtBH,EAAeK,IAAIF,EAAW,IAEhCH,EAAeM,IAAIH,GAAWI,KAAKL,IAfH,8BAmBlC,IAnBkC,EAmB5BM,EAAS,GAnBmB,cAoBhBC,MAAMC,KAAKV,EAAeW,QAAQC,QApBlB,IAoBlC,2BAA4D,CAAC,IAAlDC,EAAiD,QAC1DL,EAAOK,GAAOb,EAAeM,IAAIO,IArBD,8BAuBlC,OAAOL,EAhFaM,CAFDC,OAAOC,OAAO1B,GAEO,gBAGxC,IAAK,IAAI2B,KAAKtB,EACZD,EAAWa,KAAK,+BAAKU,EAAL,sBAEhBvB,EAAWa,KAAK,6BACbZ,EAAYsB,GAAGC,KAAI,SAAAC,GAClB,OACE,qBAAIC,UAAU,YAAd,UAA2BD,EAAOE,KAAlC,OAA2C,wBAAQC,KAAK,SAASF,UAAU,8CAA8CG,QAAS,kBAAM9B,EAAcD,EAAa2B,EAAOE,KAAO,OAAtI,2BAMnDG,QAAQC,IAAI/B,GACZ8B,QAAQC,IAAIjC,GAEZ,IAAMkC,EAAW,GACblC,EAAWmC,QACbD,EAASnB,KAAK,iBAehB,OACE,qCACE,gCACE,8BAAK,qFACL,8CACA,sBAAKa,UAAU,cAAf,UAA8BM,EAAUlC,KACxC,uBAAO4B,UAAU,eAAeE,KAAK,OAAOM,SAAU,SAAAC,GAAC,OAAIxC,EAAUwC,EAAEC,OAAOC,QAAQC,YAAY,iBAClG,gCAAK,wBAAQV,KAAK,SAASF,UAAU,uCAAuCG,QAxDhE,WAChBU,IACG3B,IADH,iDACiDlB,IAC9C8C,MAAK,SAAAC,GACJ5C,EAAY4C,EAASC,SAGtBC,OAAM,SAAAC,GACLd,QAAQC,IAAI,QAASa,OAgDhB,yBACH,mDACA,wBAAQhB,KAAK,SAASF,UAAU,uCAAuCG,QArB/D,WACdU,IACG3B,IADH,iDACiDlB,IAC9C8C,MAAK,SAAAC,GACJ5C,EAAY4C,EAASC,MACrBZ,QAAQC,IAAIU,EAASC,SAEtBC,OAAM,SAAAC,GACLd,QAAQC,IAAI,QAASa,OAanB,iCAEJ,yBACA,gCACE,wDAA2BlD,KAC3B,8BACGM,UCpEX6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.752ef18e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap';\n\nexport default function App() {\n  const [search, setSearch] = useState('');\n  const [wordList, setWordList] = useState({});\n\n  const [savedWords, setSavedWords] = useState('');\n  const getRhymes = () => {\n    axios\n      .get(`https://api.datamuse.com/words?rel_rhy=${search}`)\n      .then(response => {\n        setWordList(response.data);\n        //console.log(response.data);\n      })\n      .catch(error => {\n        console.log(\"error\", error);\n      });\n  };\n  const finalArray = []\n  const resultList = Object.values(wordList);\n\n  const groupedList = groupBy(resultList, 'numSyllables');\n  //console.log(groupedList);\n\n  for (let i in groupedList) {\n    finalArray.push(<h3>{i} syllable words</h3>);\n    //console.log(groupedList[i]);\n    finalArray.push(<ul>\n      {groupedList[i].map(rhymes => {\n        return (\n          <li className=\"list-item\">{rhymes.word}    <button type='button' className=\"btn', 'btn-outline-success', 'btn-sm, 'save\" onClick={() => setSavedWords(savedWords + rhymes.word + ', ')}>Save</button></li>\n        )\n      })}\n    </ul>)\n  };\n\n  console.log(finalArray);\n  console.log(savedWords);\n\n  const upperDiv = [];\n  if (savedWords.length) {\n    upperDiv.push('Saved words: ')\n  }\n\n  const getSyns = () => {\n    axios\n      .get(`https://api.datamuse.com/words?rel_syn=${search}`)\n      .then(response => {\n        setWordList(response.data);\n        console.log(response.data);\n      })\n      .catch(error => {\n        console.log(\"error\", error);\n      });\n  };\n\n  return (\n    <>\n      <div>\n        <div><p>https://github.com/fmackercher/si579-problem-set-6</p></div>\n        <h1>Rhyme Finder</h1>\n        <div className=\"saved-words\">{upperDiv}{savedWords}</div>\n        <input className=\"form-control\" type=\"text\" onChange={e => setSearch(e.target.value)} placeholder=\"enter a word\" />\n        <div><button type=\"button\" className=\"btn', 'btn-outline-success', 'btn-sm\" onClick={getRhymes}>Find Rhymes</button>\n          <span>               </span>\n          <button type=\"button\" className=\"btn', 'btn-outline-success', 'btn-sm\" onClick={getSyns}>Find Synonyms</button></div>\n      </div>\n      <span></span>\n      <div>\n        <h2>Words that rhyme with {search}</h2>\n        <div>\n          {finalArray}\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction groupBy(objects, property) {\n  // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n  // value for property (obj[property])\n  if (typeof property !== 'function') {\n    const propName = property;\n    property = (obj) => obj[propName];\n  }\n\n  const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n  for (const object of objects) {\n    const groupName = property(object);\n    //Make sure that the group exists\n    if (!groupedObjects.has(groupName)) {\n      groupedObjects.set(groupName, []);\n    }\n    groupedObjects.get(groupName).push(object);\n  }\n\n  // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n  const result = {};\n  for (const key of Array.from(groupedObjects.keys()).sort()) {\n    result[key] = groupedObjects.get(key);\n  }\n  return result;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}